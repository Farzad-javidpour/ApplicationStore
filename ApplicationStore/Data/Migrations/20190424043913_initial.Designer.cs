// <auto-generated />
using System;
using ApplicationStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ApplicationStore.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190424043913_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationStore.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationCategoryId");

                    b.Property<string>("ApplicationStoreUserId")
                        .IsRequired();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("RegisterDate");

                    b.Property<byte>("State");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationCategoryId");

                    b.HasIndex("ApplicationStoreUserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("ApplicationStore.Models.ApplicationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationStoreUserId")
                        .IsRequired();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<byte>("State");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStoreUserId");

                    b.ToTable("ApplicationCategories");
                });

            modelBuilder.Entity("ApplicationStore.Models.ApplicationPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationPublishId");

                    b.Property<byte[]>("Data")
                        .IsRequired();

                    b.Property<bool>("IsDefaultIcon");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<double>("Size");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationPublishId");

                    b.ToTable("ApplicationPictures");
                });

            modelBuilder.Entity("ApplicationStore.Models.ApplicationPublish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<string>("ApplicationStoreUserId")
                        .IsRequired();

                    b.Property<string>("ChangeList")
                        .IsRequired();

                    b.Property<string>("Extension")
                        .HasMaxLength(10);

                    b.Property<int>("PlatformId");

                    b.Property<double?>("Price")
                        .IsRequired();

                    b.Property<DateTime>("PublishDate");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<double>("Size");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ApplicationStoreUserId");

                    b.HasIndex("PlatformId");

                    b.ToTable("ApplicationPublishs");
                });

            modelBuilder.Entity("ApplicationStore.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationPublishId");

                    b.Property<string>("ApplicationStoreUserId")
                        .IsRequired();

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationPublishId");

                    b.HasIndex("ApplicationStoreUserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ApplicationStore.Models.CommentLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationStoreUserId")
                        .IsRequired();

                    b.Property<int>("CommentId");

                    b.Property<bool>("IsLike");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStoreUserId");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("ApplicationStore.Models.DownloadApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationPublishId");

                    b.Property<string>("ApplicationStoreUserId")
                        .IsRequired();

                    b.Property<DateTime>("RegisterDate");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationPublishId");

                    b.HasIndex("ApplicationStoreUserId");

                    b.ToTable("DownloadApplications");
                });

            modelBuilder.Entity("ApplicationStore.Models.FavorieApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationPublishId");

                    b.Property<string>("ApplicationStoreUserId")
                        .IsRequired();

                    b.Property<DateTime>("RegisterDate");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationPublishId");

                    b.HasIndex("ApplicationStoreUserId");

                    b.ToTable("FavorieApplications");
                });

            modelBuilder.Entity("ApplicationStore.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationStoreUserId")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStoreUserId");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ApplicationStore.Models.ApplicationStoreUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.ToTable("ApplicationStoreUser");

                    b.HasDiscriminator().HasValue("ApplicationStoreUser");
                });

            modelBuilder.Entity("ApplicationStore.Models.Application", b =>
                {
                    b.HasOne("ApplicationStore.Models.ApplicationCategory", "ApplicationCategory")
                        .WithMany()
                        .HasForeignKey("ApplicationCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationStore.Models.ApplicationStoreUser", "ApplicationStoreUser")
                        .WithMany()
                        .HasForeignKey("ApplicationStoreUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationStore.Models.ApplicationCategory", b =>
                {
                    b.HasOne("ApplicationStore.Models.ApplicationStoreUser", "ApplicationStoreUser")
                        .WithMany()
                        .HasForeignKey("ApplicationStoreUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationStore.Models.ApplicationPicture", b =>
                {
                    b.HasOne("ApplicationStore.Models.ApplicationPublish", "ApplicationPublish")
                        .WithMany()
                        .HasForeignKey("ApplicationPublishId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationStore.Models.ApplicationPublish", b =>
                {
                    b.HasOne("ApplicationStore.Models.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationStore.Models.ApplicationStoreUser", "ApplicationStoreUser")
                        .WithMany()
                        .HasForeignKey("ApplicationStoreUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationStore.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationStore.Models.Comment", b =>
                {
                    b.HasOne("ApplicationStore.Models.ApplicationPublish", "ApplicationPublish")
                        .WithMany()
                        .HasForeignKey("ApplicationPublishId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationStore.Models.ApplicationStoreUser", "ApplicationStoreUser")
                        .WithMany()
                        .HasForeignKey("ApplicationStoreUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationStore.Models.CommentLike", b =>
                {
                    b.HasOne("ApplicationStore.Models.ApplicationStoreUser", "ApplicationStoreUser")
                        .WithMany()
                        .HasForeignKey("ApplicationStoreUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationStore.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationStore.Models.DownloadApplication", b =>
                {
                    b.HasOne("ApplicationStore.Models.ApplicationPublish", "ApplicationPublish")
                        .WithMany()
                        .HasForeignKey("ApplicationPublishId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationStore.Models.ApplicationStoreUser", "ApplicationStoreUser")
                        .WithMany()
                        .HasForeignKey("ApplicationStoreUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationStore.Models.FavorieApplication", b =>
                {
                    b.HasOne("ApplicationStore.Models.ApplicationPublish", "ApplicationPublish")
                        .WithMany()
                        .HasForeignKey("ApplicationPublishId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationStore.Models.ApplicationStoreUser", "ApplicationStoreUser")
                        .WithMany()
                        .HasForeignKey("ApplicationStoreUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationStore.Models.Platform", b =>
                {
                    b.HasOne("ApplicationStore.Models.ApplicationStoreUser", "ApplicationStoreUser")
                        .WithMany()
                        .HasForeignKey("ApplicationStoreUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
